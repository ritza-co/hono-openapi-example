/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as models from "../index.js";
export class CreateError extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.success = err.success;
        this.error = err.error;
        this.name = "CreateError";
    }
}
/** @internal */
export const CreateError$inboundSchema = z.object({
    success: z.boolean(),
    error: z.lazy(() => models.ErrorT$inboundSchema),
})
    .transform((v) => {
    return new CreateError(v);
});
/** @internal */
export const CreateError$outboundSchema = z.instanceof(CreateError)
    .transform(v => v.data$)
    .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => models.ErrorT$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateError$;
(function (CreateError$) {
    /** @deprecated use `CreateError$inboundSchema` instead. */
    CreateError$.inboundSchema = CreateError$inboundSchema;
    /** @deprecated use `CreateError$outboundSchema` instead. */
    CreateError$.outboundSchema = CreateError$outboundSchema;
})(CreateError$ || (CreateError$ = {}));
//# sourceMappingURL=createerror.js.map