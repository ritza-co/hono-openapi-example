/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const Path$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
export const Path$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Path$;
(function (Path$) {
    /** @deprecated use `Path$inboundSchema` instead. */
    Path$.inboundSchema = Path$inboundSchema;
    /** @deprecated use `Path$outboundSchema` instead. */
    Path$.outboundSchema = Path$outboundSchema;
})(Path$ || (Path$ = {}));
export function pathToJSON(path) {
    return JSON.stringify(Path$outboundSchema.parse(path));
}
export function pathFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Path$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Path' from JSON`);
}
/** @internal */
export const Issue$inboundSchema = z
    .object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
});
/** @internal */
export const Issue$outboundSchema = z.object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Issue$;
(function (Issue$) {
    /** @deprecated use `Issue$inboundSchema` instead. */
    Issue$.inboundSchema = Issue$inboundSchema;
    /** @deprecated use `Issue$outboundSchema` instead. */
    Issue$.outboundSchema = Issue$outboundSchema;
})(Issue$ || (Issue$ = {}));
export function issueToJSON(issue) {
    return JSON.stringify(Issue$outboundSchema.parse(issue));
}
export function issueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Issue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Issue' from JSON`);
}
/** @internal */
export const ErrorT$inboundSchema = z
    .object({
    issues: z.array(z.lazy(() => Issue$inboundSchema)),
    name: z.string(),
});
/** @internal */
export const ErrorT$outboundSchema = z.object({
    issues: z.array(z.lazy(() => Issue$outboundSchema)),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ErrorT$;
(function (ErrorT$) {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    ErrorT$.inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    ErrorT$.outboundSchema = ErrorT$outboundSchema;
})(ErrorT$ || (ErrorT$ = {}));
export function errorToJSON(errorT) {
    return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}
export function errorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ErrorT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ErrorT' from JSON`);
}
//# sourceMappingURL=createerror.js.map