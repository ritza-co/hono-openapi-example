/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UserInsert$inboundSchema = z.object({
    name: z.string(),
    age: z.number(),
});
/** @internal */
export const UserInsert$outboundSchema = z.object({
    name: z.string(),
    age: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserInsert$;
(function (UserInsert$) {
    /** @deprecated use `UserInsert$inboundSchema` instead. */
    UserInsert$.inboundSchema = UserInsert$inboundSchema;
    /** @deprecated use `UserInsert$outboundSchema` instead. */
    UserInsert$.outboundSchema = UserInsert$outboundSchema;
})(UserInsert$ || (UserInsert$ = {}));
export function userInsertToJSON(userInsert) {
    return JSON.stringify(UserInsert$outboundSchema.parse(userInsert));
}
export function userInsertFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserInsert$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserInsert' from JSON`);
}
//# sourceMappingURL=userinsert.js.map