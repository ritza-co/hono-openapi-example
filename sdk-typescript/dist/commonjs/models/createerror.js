"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorT$ = exports.ErrorT$outboundSchema = exports.ErrorT$inboundSchema = exports.Issue$ = exports.Issue$outboundSchema = exports.Issue$inboundSchema = exports.Path$ = exports.Path$outboundSchema = exports.Path$inboundSchema = void 0;
exports.pathToJSON = pathToJSON;
exports.pathFromJSON = pathFromJSON;
exports.issueToJSON = issueToJSON;
exports.issueFromJSON = issueFromJSON;
exports.errorToJSON = errorToJSON;
exports.errorFromJSON = errorFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../lib/schemas.js");
/** @internal */
exports.Path$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
exports.Path$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Path$;
(function (Path$) {
    /** @deprecated use `Path$inboundSchema` instead. */
    Path$.inboundSchema = exports.Path$inboundSchema;
    /** @deprecated use `Path$outboundSchema` instead. */
    Path$.outboundSchema = exports.Path$outboundSchema;
})(Path$ || (exports.Path$ = Path$ = {}));
function pathToJSON(path) {
    return JSON.stringify(exports.Path$outboundSchema.parse(path));
}
function pathFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Path$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Path' from JSON`);
}
/** @internal */
exports.Issue$inboundSchema = z
    .object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
});
/** @internal */
exports.Issue$outboundSchema = z.object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Issue$;
(function (Issue$) {
    /** @deprecated use `Issue$inboundSchema` instead. */
    Issue$.inboundSchema = exports.Issue$inboundSchema;
    /** @deprecated use `Issue$outboundSchema` instead. */
    Issue$.outboundSchema = exports.Issue$outboundSchema;
})(Issue$ || (exports.Issue$ = Issue$ = {}));
function issueToJSON(issue) {
    return JSON.stringify(exports.Issue$outboundSchema.parse(issue));
}
function issueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Issue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Issue' from JSON`);
}
/** @internal */
exports.ErrorT$inboundSchema = z
    .object({
    issues: z.array(z.lazy(() => exports.Issue$inboundSchema)),
    name: z.string(),
});
/** @internal */
exports.ErrorT$outboundSchema = z.object({
    issues: z.array(z.lazy(() => exports.Issue$outboundSchema)),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ErrorT$;
(function (ErrorT$) {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    ErrorT$.inboundSchema = exports.ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    ErrorT$.outboundSchema = exports.ErrorT$outboundSchema;
})(ErrorT$ || (exports.ErrorT$ = ErrorT$ = {}));
function errorToJSON(errorT) {
    return JSON.stringify(exports.ErrorT$outboundSchema.parse(errorT));
}
function errorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ErrorT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ErrorT' from JSON`);
}
//# sourceMappingURL=createerror.js.map